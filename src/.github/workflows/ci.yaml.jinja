name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Poetry
        run: pipx install poetry
      - uses: actions/setup-python@v5
        with:
          python-version: 3.13
          cache: poetry
      - name: Install package
        run: poetry install
      - name: Run linters
        run: poetry run task lint
      - name: Run tests
        run: poetry run task test

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, 'cd skip')
    steps:
      - uses: actions/checkout@v4
      - name: Bump version
        uses: TriPSs/conventional-changelog-action@v3
        id: version
        with:
          github-token: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}
          git-user-name: "GitHub Actions"
          git-user-email: "action@github.com"
          version-file: pyproject.toml
          version-path: project.version
          preset: conventionalcommits
          output-file: false
      - name: Publish to GitHub
        if: steps.version.outputs.skipped == 'false'
        run: gh release create "$TAG" --notes "$BODY"
        env:
          GITHUB_TOKEN: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}
          TAG: {% raw %}${{ steps.version.outputs.tag }}{% endraw %}
          BODY: {% raw %}${{ steps.version.outputs.clean_changelog }}{% endraw %}
      {% if not private -%}
      - name: Publish to PyPI
        if: steps.version.outputs.skipped == 'false'
        run: pipx run poetry publish --build
        env:
          POETRY_PYPI_TOKEN_PYPI: {% raw %}${{ secrets.PYPI_TOKEN }}{% endraw %}
      {% endif -%}
      {% if docker -%}
      - uses: satackey/action-docker-layer-caching@v0.0.11
        if: steps.version.outputs.skipped == 'false'
      - name: Publish to DockerHub
        if: steps.version.outputs.skipped == 'false'
        run: |
          echo "$PASSWORD" | docker login https://ghcr.io -u "$USERNAME" --password-stdin
          docker build -t $REPO:$TAG -t $REPO:latest .
          docker push -a $REPO
        env:
          USERNAME: {% raw %}${{ github.actor }}{% endraw %}
          PASSWORD: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}
          REPO: ghcr.io/{% raw %}${{ github.repository }}{% endraw %}
          TAG: {% raw %}${{ steps.version.outputs.tag }}{% endraw %}
      {% endif -%}
